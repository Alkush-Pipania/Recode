// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Difficulty {
  easy
  medium
  hard
}

enum ReminderType {
  easy    // 3 days
  medium  // 7 days
  hard    // 14 days (or custom)
}

enum CompletionStatus {
  pending     // Not attempted yet
  completed   // Successfully completed
  skipped     // User skipped this question
  failed      // Attempted but failed
}

// Core Application Models
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Progress tracking
  userProgress  UserProgress[]
  
  // Better Auth relations
  sessions      Session[]
  accounts      Account[]
  @@map("user")
}

model Topic {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(200)
  description    String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questionTopics QuestionTopic[]
  
  @@index([name])
}

// Clean Question Schema - No user dependencies
model Question {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(300)
  link           String?         @db.VarChar(500)
  difficulty     Difficulty
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Default reminder settings based on difficulty
  defaultReminderDays Int         @default(7) // Can be overridden per user
  
  // Relations
  questionTopics QuestionTopic[]
  userProgress   UserProgress[]
  
  // Indexes for performance
  @@index([difficulty])
  @@index([createdAt])
  @@index([difficulty, createdAt])
}

model QuestionTopic {
  questionId Int
  topicId    Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  @@id([questionId, topicId])
  @@index([topicId])
}

// User Progress Tracking - The heart of your system
model UserProgress {
  id             String           @id @default(cuid())
  userId         String
  questionId     Int
  
  // Completion tracking
  status         CompletionStatus @default(pending)
  firstCompletedAt DateTime?      // When user first completed this question
  lastCompletedAt  DateTime?      // Most recent completion
  completionCount  Int            @default(0) // How many times completed
  
  // Revision/Reminder system
  reminderType     ReminderType   @default(medium) // User can customize
  customReminderDays Int?         // Override default reminder days
  nextReminderAt   DateTime?      // When to remind next
  lastRemindedAt   DateTime?      // When last reminder was sent
  
  // Metadata
  notes          String?          @db.Text // User can add personal notes
  timeSpentMinutes Int?           // Optional: track time spent
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  question       Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, questionId]) // One progress record per user per question
  @@index([userId, status])      // Query user's completed/pending questions
  @@index([nextReminderAt])      // Query questions due for reminder
  @@index([userId, nextReminderAt]) // User-specific reminder queries
  @@index([lastCompletedAt])     // Track recent activity
}

// Optional: Track detailed attempt history
model QuestionAttempt {
  id           String           @id @default(cuid())
  userId       String
  questionId   Int
  
  // Attempt details
  status       CompletionStatus // completed, failed, skipped
  timeSpent    Int?             // Minutes spent on this attempt
  notes        String?          @db.Text
  attemptedAt  DateTime         @default(now())
  
  // Relations (no direct foreign keys to avoid cascading issues)
  // You'll join these manually in your queries
  
  @@index([userId, questionId, attemptedAt])
  @@index([attemptedAt])
}

// Better Auth Models (Keep as-is for compatibility)
model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@unique([identifier, value])
  @@map("verification")
}