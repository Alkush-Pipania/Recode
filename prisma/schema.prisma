// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Enums
enum Difficulty {
  easy
  medium
  hard
}

enum ReminderType {
  easy    // 3 days
  medium  // 7 days
  hard    // 14 days (or use customReminderDays if set)
}

enum CompletionStatus {
  pending     // Not attempted yet
  completed   // Successfully completed
  skipped     // User skipped this question
  failed      // Attempted but failed
}
model User {
  id               String     @id @default(cuid())
  name             String?
  email            String     @unique
  emailVerified    Boolean    @default(false)
  image            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  leetcodeUsername String?   @unique

  userProgress     UserProgress[]
  externalAttempts ExternalQuestionAttempt[]
  sessions         Session[]
  accounts         Account[]

  @@map("user")
}

model Topic {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(200)
  description    String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questionTopics QuestionTopic[]

  @@index([name])
}

model Question {
  id                  Int             @id @default(autoincrement())
  title               String          @db.VarChar(300)
  link                String?         @db.VarChar(500)
  difficulty          Difficulty
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  slug                String?         @unique

  questionTopics      QuestionTopic[]
  userProgress        UserProgress[]

  @@index([difficulty])
  @@index([createdAt])
  @@index([difficulty, createdAt])
}

model QuestionTopic {
  questionId Int
  topicId    Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  topic      Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([questionId, topicId])
  @@index([topicId])
}

model UserProgress {
  id                 String           @id @default(cuid())
  userId             String
  questionId         Int
  status             CompletionStatus @default(pending)
  firstCompletedAt   DateTime?        // Track when user first completed
  lastCompletedAt    DateTime?        // For calendar-like tracking
  completionCount    Int              @default(0)
  reminderType       ReminderType     @default(medium)
  customReminderDays Int?             // Optional custom override
  nextReminderAt     DateTime?
  lastRemindedAt     DateTime?
  notes              String?          @db.Text
  timeSpentMinutes   Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  question           Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId, status])
  @@index([nextReminderAt])
  @@index([userId, nextReminderAt])
  @@index([lastCompletedAt])
}

model QuestionAttempt {
  id           String           @id @default(cuid())
  userId       String
  questionId   Int
  status       CompletionStatus
  timeSpent    Int?
  notes        String?          @db.Text
  attemptedAt  DateTime         @default(now())

  @@index([userId, questionId, attemptedAt])
  @@index([attemptedAt])
}

model ExternalQuestionAttempt {
  id          String            @id @default(cuid())
  userId      String
  title       String
  slug        String?
  link        String?
  difficulty  Difficulty?
  status      CompletionStatus  @default(completed)
  attemptedAt DateTime          @default(now())
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, attemptedAt])
  @@index([slug])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}
